// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"strings"
)

func main() {
	file := flag.String("file", "vuln.json", "JSON with vulnerability results")
	threshold := flag.Float64("threshold", 5, "Maximum allowable CVSS Score")
	flag.Parse()
	jsonBytes, err := ioutil.ReadFile(*file)
	if err != nil {
		log.Fatalf("Unable to read input JSON: %v", err)
	}
	var description VulnerabilityDescription
	json.Unmarshal(jsonBytes, &description)
	vulns := description.PackageVulnerabilitySummary.Vulnerabilities
	vulnLists := [][]Occurences{vulns.CRITICAL, vulns.HIGH, vulns.MEDIUM, vulns.LOW, vulns.None}
	var allOccurences []Occurences
	for _, v := range vulnLists {
		allOccurences = append(allOccurences, v...)
	}

	vulnsFound := false
	for _, value := range allOccurences {
		if value.VulnerabilityDetails.CvssScore > *threshold {
			vulnsFound = true
			affectedLocation := value.VulnerabilityDetails.PackageIssue[0].AffectedLocation
			noteParts := strings.Split(value.NoteName, "/")
			cve := noteParts[len(noteParts)-1]
			fmt.Printf("%s\t%.01f\t%s\t%s\t%s\n", cve, value.VulnerabilityDetails.CvssScore, affectedLocation.CpeURI, affectedLocation.Package, affectedLocation.Version)
		}
	}
	if vulnsFound {
		fmt.Printf("Vulnerabilities found above threshold %.01f\n", *threshold)
		os.Exit(1)
	} else {
		fmt.Printf("No vulnerabilities found above threshold %.01f\n", *threshold)
	}
}
